from pydantic import BaseModel
from typing import List, Optional, Union
import yaml

class CredsData(BaseModel):
    credential: str
    safe: str
    appid: str
    cyberark_ca: str
    cyberark_cred: str
    cyberark_key: str

class Query(BaseModel):
    query: str
    condition: Optional[str] = None

class Command(BaseModel):
    command: str
    expected_output: str

class URLCheck(BaseModel):
    type: str = "URLCheck"
    checkname: Optional[str] = None
    description: str
    url: Optional[str] = None
    status_code: Optional[int] = None
    xpath: Optional[str] = None
    value: Optional[str] = None
    verify: Optional[bool] = False
    credsdata: Optional[CredsData] = None

class DBCheck(BaseModel):
    type: str = "DBCheck"
    checkname: Optional[str] = None
    description: str
    db_type: Optional[str] = None
    db_host: Optional[str] = None
    db_name: Optional[str] = None
    credsdata: Optional[CredsData] = None
    queries: Optional[List[Query]] = None

class LinuxCheck(BaseModel):
    type: str = "LinuxCheck"
    hostname: Optional[str] = None
    checkname: Optional[str] = None
    description: str
    credsdata: Optional[CredsData] = None
    commands: Optional[List[Command]] = None

class WindowsCheck(BaseModel):
    type: str = "WindowsCheck"
    hostname: Optional[str] = None
    checkname: Optional[str] = None
    description: str
    credsdata: Optional[CredsData] = None
    commands: Optional[List[Command]] = None
    executionPlatform: Optional[str] = None

class Report(BaseModel):
    generateReport: bool
    format: str

class Application(BaseModel):
    name: str
    report: Report
    checks: List[Union[URLCheck, DBCheck, LinuxCheck, WindowsCheck]]

